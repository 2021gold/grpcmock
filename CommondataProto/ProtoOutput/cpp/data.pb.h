// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_data_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_data_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_data_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_data_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_data_2eproto;
namespace commondata {
class DisplaySetting;
struct DisplaySettingDefaultTypeInternal;
extern DisplaySettingDefaultTypeInternal _DisplaySetting_default_instance_;
class SystemInfo;
struct SystemInfoDefaultTypeInternal;
extern SystemInfoDefaultTypeInternal _SystemInfo_default_instance_;
class UserProfile;
struct UserProfileDefaultTypeInternal;
extern UserProfileDefaultTypeInternal _UserProfile_default_instance_;
}  // namespace commondata
PROTOBUF_NAMESPACE_OPEN
template<> ::commondata::DisplaySetting* Arena::CreateMaybeMessage<::commondata::DisplaySetting>(Arena*);
template<> ::commondata::SystemInfo* Arena::CreateMaybeMessage<::commondata::SystemInfo>(Arena*);
template<> ::commondata::UserProfile* Arena::CreateMaybeMessage<::commondata::UserProfile>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace commondata {

// ===================================================================

class SystemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commondata.SystemInfo) */ {
 public:
  inline SystemInfo() : SystemInfo(nullptr) {}
  ~SystemInfo() override;
  explicit constexpr SystemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SystemInfo(const SystemInfo& from);
  SystemInfo(SystemInfo&& from) noexcept
    : SystemInfo() {
    *this = ::std::move(from);
  }

  inline SystemInfo& operator=(const SystemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SystemInfo& operator=(SystemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SystemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SystemInfo* internal_default_instance() {
    return reinterpret_cast<const SystemInfo*>(
               &_SystemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SystemInfo& a, SystemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SystemInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SystemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SystemInfo* New() const final {
    return new SystemInfo();
  }

  SystemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SystemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SystemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SystemInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SystemInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commondata.SystemInfo";
  }
  protected:
  explicit SystemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 1,
    kModelFieldNumber = 2,
    kRegionFieldNumber = 3,
    kTypeFieldNumber = 5,
    kSerialFieldNumber = 4,
    kScreenFieldNumber = 6,
  };
  // string version = 1;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string model = 2;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_MUST_USE_RESULT std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string region = 3;
  void clear_region();
  const std::string& region() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_region(ArgT0&& arg0, ArgT... args);
  std::string* mutable_region();
  PROTOBUF_MUST_USE_RESULT std::string* release_region();
  void set_allocated_region(std::string* region);
  private:
  const std::string& _internal_region() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_region(const std::string& value);
  std::string* _internal_mutable_region();
  public:

  // string type = 5;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 serial = 4;
  void clear_serial();
  ::PROTOBUF_NAMESPACE_ID::int32 serial() const;
  void set_serial(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_serial() const;
  void _internal_set_serial(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 screen = 6;
  void clear_screen();
  ::PROTOBUF_NAMESPACE_ID::int32 screen() const;
  void set_screen(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_screen() const;
  void _internal_set_screen(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:commondata.SystemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr region_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int32 serial_;
  ::PROTOBUF_NAMESPACE_ID::int32 screen_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class DisplaySetting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commondata.DisplaySetting) */ {
 public:
  inline DisplaySetting() : DisplaySetting(nullptr) {}
  ~DisplaySetting() override;
  explicit constexpr DisplaySetting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisplaySetting(const DisplaySetting& from);
  DisplaySetting(DisplaySetting&& from) noexcept
    : DisplaySetting() {
    *this = ::std::move(from);
  }

  inline DisplaySetting& operator=(const DisplaySetting& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisplaySetting& operator=(DisplaySetting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DisplaySetting& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisplaySetting* internal_default_instance() {
    return reinterpret_cast<const DisplaySetting*>(
               &_DisplaySetting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DisplaySetting& a, DisplaySetting& b) {
    a.Swap(&b);
  }
  inline void Swap(DisplaySetting* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisplaySetting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DisplaySetting* New() const final {
    return new DisplaySetting();
  }

  DisplaySetting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DisplaySetting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DisplaySetting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DisplaySetting& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisplaySetting* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commondata.DisplaySetting";
  }
  protected:
  explicit DisplaySetting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kThemeFieldNumber = 1,
    kLanguageFieldNumber = 3,
    kCameraFieldNumber = 6,
    kKeyboardFieldNumber = 7,
    kNotificationFieldNumber = 8,
    kFontsizeFieldNumber = 2,
    kVolumeFieldNumber = 4,
    kBrightnessFieldNumber = 5,
  };
  // string theme = 1;
  void clear_theme();
  const std::string& theme() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_theme(ArgT0&& arg0, ArgT... args);
  std::string* mutable_theme();
  PROTOBUF_MUST_USE_RESULT std::string* release_theme();
  void set_allocated_theme(std::string* theme);
  private:
  const std::string& _internal_theme() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_theme(const std::string& value);
  std::string* _internal_mutable_theme();
  public:

  // string language = 3;
  void clear_language();
  const std::string& language() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_language(ArgT0&& arg0, ArgT... args);
  std::string* mutable_language();
  PROTOBUF_MUST_USE_RESULT std::string* release_language();
  void set_allocated_language(std::string* language);
  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(const std::string& value);
  std::string* _internal_mutable_language();
  public:

  // string camera = 6;
  void clear_camera();
  const std::string& camera() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camera(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camera();
  PROTOBUF_MUST_USE_RESULT std::string* release_camera();
  void set_allocated_camera(std::string* camera);
  private:
  const std::string& _internal_camera() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camera(const std::string& value);
  std::string* _internal_mutable_camera();
  public:

  // string keyboard = 7;
  void clear_keyboard();
  const std::string& keyboard() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_keyboard(ArgT0&& arg0, ArgT... args);
  std::string* mutable_keyboard();
  PROTOBUF_MUST_USE_RESULT std::string* release_keyboard();
  void set_allocated_keyboard(std::string* keyboard);
  private:
  const std::string& _internal_keyboard() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_keyboard(const std::string& value);
  std::string* _internal_mutable_keyboard();
  public:

  // string notification = 8;
  void clear_notification();
  const std::string& notification() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notification(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notification();
  PROTOBUF_MUST_USE_RESULT std::string* release_notification();
  void set_allocated_notification(std::string* notification);
  private:
  const std::string& _internal_notification() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notification(const std::string& value);
  std::string* _internal_mutable_notification();
  public:

  // int32 fontsize = 2;
  void clear_fontsize();
  ::PROTOBUF_NAMESPACE_ID::int32 fontsize() const;
  void set_fontsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fontsize() const;
  void _internal_set_fontsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 volume = 4;
  void clear_volume();
  ::PROTOBUF_NAMESPACE_ID::int32 volume() const;
  void set_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_volume() const;
  void _internal_set_volume(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 brightness = 5;
  void clear_brightness();
  ::PROTOBUF_NAMESPACE_ID::int32 brightness() const;
  void set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_brightness() const;
  void _internal_set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:commondata.DisplaySetting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr theme_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr language_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camera_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr keyboard_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notification_;
  ::PROTOBUF_NAMESPACE_ID::int32 fontsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 volume_;
  ::PROTOBUF_NAMESPACE_ID::int32 brightness_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// -------------------------------------------------------------------

class UserProfile final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:commondata.UserProfile) */ {
 public:
  inline UserProfile() : UserProfile(nullptr) {}
  ~UserProfile() override;
  explicit constexpr UserProfile(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserProfile(const UserProfile& from);
  UserProfile(UserProfile&& from) noexcept
    : UserProfile() {
    *this = ::std::move(from);
  }

  inline UserProfile& operator=(const UserProfile& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserProfile& operator=(UserProfile&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserProfile& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserProfile* internal_default_instance() {
    return reinterpret_cast<const UserProfile*>(
               &_UserProfile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UserProfile& a, UserProfile& b) {
    a.Swap(&b);
  }
  inline void Swap(UserProfile* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserProfile* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UserProfile* New() const final {
    return new UserProfile();
  }

  UserProfile* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UserProfile>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserProfile& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UserProfile& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserProfile* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "commondata.UserProfile";
  }
  protected:
  explicit UserProfile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsernameFieldNumber = 2,
    kDispFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // string username = 2;
  void clear_username();
  const std::string& username() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_username(ArgT0&& arg0, ArgT... args);
  std::string* mutable_username();
  PROTOBUF_MUST_USE_RESULT std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // .commondata.DisplaySetting disp = 3;
  bool has_disp() const;
  private:
  bool _internal_has_disp() const;
  public:
  void clear_disp();
  const ::commondata::DisplaySetting& disp() const;
  PROTOBUF_MUST_USE_RESULT ::commondata::DisplaySetting* release_disp();
  ::commondata::DisplaySetting* mutable_disp();
  void set_allocated_disp(::commondata::DisplaySetting* disp);
  private:
  const ::commondata::DisplaySetting& _internal_disp() const;
  ::commondata::DisplaySetting* _internal_mutable_disp();
  public:
  void unsafe_arena_set_allocated_disp(
      ::commondata::DisplaySetting* disp);
  ::commondata::DisplaySetting* unsafe_arena_release_disp();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:commondata.UserProfile)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::commondata::DisplaySetting* disp_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_data_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SystemInfo

// string version = 1;
inline void SystemInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& SystemInfo::version() const {
  // @@protoc_insertion_point(field_get:commondata.SystemInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:commondata.SystemInfo.version)
}
inline std::string* SystemInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:commondata.SystemInfo.version)
  return _s;
}
inline const std::string& SystemInfo::_internal_version() const {
  return version_.Get();
}
inline void SystemInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_version() {
  // @@protoc_insertion_point(field_release:commondata.SystemInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:commondata.SystemInfo.version)
}

// string model = 2;
inline void SystemInfo::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& SystemInfo::model() const {
  // @@protoc_insertion_point(field_get:commondata.SystemInfo.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:commondata.SystemInfo.model)
}
inline std::string* SystemInfo::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:commondata.SystemInfo.model)
  return _s;
}
inline const std::string& SystemInfo::_internal_model() const {
  return model_.Get();
}
inline void SystemInfo::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_model() {
  // @@protoc_insertion_point(field_release:commondata.SystemInfo.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:commondata.SystemInfo.model)
}

// string region = 3;
inline void SystemInfo::clear_region() {
  region_.ClearToEmpty();
}
inline const std::string& SystemInfo::region() const {
  // @@protoc_insertion_point(field_get:commondata.SystemInfo.region)
  return _internal_region();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_region(ArgT0&& arg0, ArgT... args) {
 
 region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:commondata.SystemInfo.region)
}
inline std::string* SystemInfo::mutable_region() {
  std::string* _s = _internal_mutable_region();
  // @@protoc_insertion_point(field_mutable:commondata.SystemInfo.region)
  return _s;
}
inline const std::string& SystemInfo::_internal_region() const {
  return region_.Get();
}
inline void SystemInfo::_internal_set_region(const std::string& value) {
  
  region_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_region() {
  
  return region_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_region() {
  // @@protoc_insertion_point(field_release:commondata.SystemInfo.region)
  return region_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_region(std::string* region) {
  if (region != nullptr) {
    
  } else {
    
  }
  region_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), region,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:commondata.SystemInfo.region)
}

// int32 serial = 4;
inline void SystemInfo::clear_serial() {
  serial_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemInfo::_internal_serial() const {
  return serial_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemInfo::serial() const {
  // @@protoc_insertion_point(field_get:commondata.SystemInfo.serial)
  return _internal_serial();
}
inline void SystemInfo::_internal_set_serial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  serial_ = value;
}
inline void SystemInfo::set_serial(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:commondata.SystemInfo.serial)
}

// string type = 5;
inline void SystemInfo::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& SystemInfo::type() const {
  // @@protoc_insertion_point(field_get:commondata.SystemInfo.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SystemInfo::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:commondata.SystemInfo.type)
}
inline std::string* SystemInfo::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:commondata.SystemInfo.type)
  return _s;
}
inline const std::string& SystemInfo::_internal_type() const {
  return type_.Get();
}
inline void SystemInfo::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SystemInfo::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SystemInfo::release_type() {
  // @@protoc_insertion_point(field_release:commondata.SystemInfo.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SystemInfo::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:commondata.SystemInfo.type)
}

// int32 screen = 6;
inline void SystemInfo::clear_screen() {
  screen_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemInfo::_internal_screen() const {
  return screen_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SystemInfo::screen() const {
  // @@protoc_insertion_point(field_get:commondata.SystemInfo.screen)
  return _internal_screen();
}
inline void SystemInfo::_internal_set_screen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  screen_ = value;
}
inline void SystemInfo::set_screen(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_screen(value);
  // @@protoc_insertion_point(field_set:commondata.SystemInfo.screen)
}

// -------------------------------------------------------------------

// DisplaySetting

// string theme = 1;
inline void DisplaySetting::clear_theme() {
  theme_.ClearToEmpty();
}
inline const std::string& DisplaySetting::theme() const {
  // @@protoc_insertion_point(field_get:commondata.DisplaySetting.theme)
  return _internal_theme();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisplaySetting::set_theme(ArgT0&& arg0, ArgT... args) {
 
 theme_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:commondata.DisplaySetting.theme)
}
inline std::string* DisplaySetting::mutable_theme() {
  std::string* _s = _internal_mutable_theme();
  // @@protoc_insertion_point(field_mutable:commondata.DisplaySetting.theme)
  return _s;
}
inline const std::string& DisplaySetting::_internal_theme() const {
  return theme_.Get();
}
inline void DisplaySetting::_internal_set_theme(const std::string& value) {
  
  theme_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DisplaySetting::_internal_mutable_theme() {
  
  return theme_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DisplaySetting::release_theme() {
  // @@protoc_insertion_point(field_release:commondata.DisplaySetting.theme)
  return theme_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DisplaySetting::set_allocated_theme(std::string* theme) {
  if (theme != nullptr) {
    
  } else {
    
  }
  theme_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), theme,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:commondata.DisplaySetting.theme)
}

// int32 fontsize = 2;
inline void DisplaySetting::clear_fontsize() {
  fontsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplaySetting::_internal_fontsize() const {
  return fontsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplaySetting::fontsize() const {
  // @@protoc_insertion_point(field_get:commondata.DisplaySetting.fontsize)
  return _internal_fontsize();
}
inline void DisplaySetting::_internal_set_fontsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fontsize_ = value;
}
inline void DisplaySetting::set_fontsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fontsize(value);
  // @@protoc_insertion_point(field_set:commondata.DisplaySetting.fontsize)
}

// string language = 3;
inline void DisplaySetting::clear_language() {
  language_.ClearToEmpty();
}
inline const std::string& DisplaySetting::language() const {
  // @@protoc_insertion_point(field_get:commondata.DisplaySetting.language)
  return _internal_language();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisplaySetting::set_language(ArgT0&& arg0, ArgT... args) {
 
 language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:commondata.DisplaySetting.language)
}
inline std::string* DisplaySetting::mutable_language() {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:commondata.DisplaySetting.language)
  return _s;
}
inline const std::string& DisplaySetting::_internal_language() const {
  return language_.Get();
}
inline void DisplaySetting::_internal_set_language(const std::string& value) {
  
  language_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DisplaySetting::_internal_mutable_language() {
  
  return language_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DisplaySetting::release_language() {
  // @@protoc_insertion_point(field_release:commondata.DisplaySetting.language)
  return language_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DisplaySetting::set_allocated_language(std::string* language) {
  if (language != nullptr) {
    
  } else {
    
  }
  language_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), language,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:commondata.DisplaySetting.language)
}

// int32 volume = 4;
inline void DisplaySetting::clear_volume() {
  volume_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplaySetting::_internal_volume() const {
  return volume_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplaySetting::volume() const {
  // @@protoc_insertion_point(field_get:commondata.DisplaySetting.volume)
  return _internal_volume();
}
inline void DisplaySetting::_internal_set_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  volume_ = value;
}
inline void DisplaySetting::set_volume(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:commondata.DisplaySetting.volume)
}

// int32 brightness = 5;
inline void DisplaySetting::clear_brightness() {
  brightness_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplaySetting::_internal_brightness() const {
  return brightness_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DisplaySetting::brightness() const {
  // @@protoc_insertion_point(field_get:commondata.DisplaySetting.brightness)
  return _internal_brightness();
}
inline void DisplaySetting::_internal_set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  brightness_ = value;
}
inline void DisplaySetting::set_brightness(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_brightness(value);
  // @@protoc_insertion_point(field_set:commondata.DisplaySetting.brightness)
}

// string camera = 6;
inline void DisplaySetting::clear_camera() {
  camera_.ClearToEmpty();
}
inline const std::string& DisplaySetting::camera() const {
  // @@protoc_insertion_point(field_get:commondata.DisplaySetting.camera)
  return _internal_camera();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisplaySetting::set_camera(ArgT0&& arg0, ArgT... args) {
 
 camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:commondata.DisplaySetting.camera)
}
inline std::string* DisplaySetting::mutable_camera() {
  std::string* _s = _internal_mutable_camera();
  // @@protoc_insertion_point(field_mutable:commondata.DisplaySetting.camera)
  return _s;
}
inline const std::string& DisplaySetting::_internal_camera() const {
  return camera_.Get();
}
inline void DisplaySetting::_internal_set_camera(const std::string& value) {
  
  camera_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DisplaySetting::_internal_mutable_camera() {
  
  return camera_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DisplaySetting::release_camera() {
  // @@protoc_insertion_point(field_release:commondata.DisplaySetting.camera)
  return camera_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DisplaySetting::set_allocated_camera(std::string* camera) {
  if (camera != nullptr) {
    
  } else {
    
  }
  camera_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), camera,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:commondata.DisplaySetting.camera)
}

// string keyboard = 7;
inline void DisplaySetting::clear_keyboard() {
  keyboard_.ClearToEmpty();
}
inline const std::string& DisplaySetting::keyboard() const {
  // @@protoc_insertion_point(field_get:commondata.DisplaySetting.keyboard)
  return _internal_keyboard();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisplaySetting::set_keyboard(ArgT0&& arg0, ArgT... args) {
 
 keyboard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:commondata.DisplaySetting.keyboard)
}
inline std::string* DisplaySetting::mutable_keyboard() {
  std::string* _s = _internal_mutable_keyboard();
  // @@protoc_insertion_point(field_mutable:commondata.DisplaySetting.keyboard)
  return _s;
}
inline const std::string& DisplaySetting::_internal_keyboard() const {
  return keyboard_.Get();
}
inline void DisplaySetting::_internal_set_keyboard(const std::string& value) {
  
  keyboard_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DisplaySetting::_internal_mutable_keyboard() {
  
  return keyboard_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DisplaySetting::release_keyboard() {
  // @@protoc_insertion_point(field_release:commondata.DisplaySetting.keyboard)
  return keyboard_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DisplaySetting::set_allocated_keyboard(std::string* keyboard) {
  if (keyboard != nullptr) {
    
  } else {
    
  }
  keyboard_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), keyboard,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:commondata.DisplaySetting.keyboard)
}

// string notification = 8;
inline void DisplaySetting::clear_notification() {
  notification_.ClearToEmpty();
}
inline const std::string& DisplaySetting::notification() const {
  // @@protoc_insertion_point(field_get:commondata.DisplaySetting.notification)
  return _internal_notification();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DisplaySetting::set_notification(ArgT0&& arg0, ArgT... args) {
 
 notification_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:commondata.DisplaySetting.notification)
}
inline std::string* DisplaySetting::mutable_notification() {
  std::string* _s = _internal_mutable_notification();
  // @@protoc_insertion_point(field_mutable:commondata.DisplaySetting.notification)
  return _s;
}
inline const std::string& DisplaySetting::_internal_notification() const {
  return notification_.Get();
}
inline void DisplaySetting::_internal_set_notification(const std::string& value) {
  
  notification_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DisplaySetting::_internal_mutable_notification() {
  
  return notification_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DisplaySetting::release_notification() {
  // @@protoc_insertion_point(field_release:commondata.DisplaySetting.notification)
  return notification_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DisplaySetting::set_allocated_notification(std::string* notification) {
  if (notification != nullptr) {
    
  } else {
    
  }
  notification_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notification,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:commondata.DisplaySetting.notification)
}

// -------------------------------------------------------------------

// UserProfile

// int32 id = 1;
inline void UserProfile::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserProfile::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UserProfile::id() const {
  // @@protoc_insertion_point(field_get:commondata.UserProfile.id)
  return _internal_id();
}
inline void UserProfile::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void UserProfile::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:commondata.UserProfile.id)
}

// string username = 2;
inline void UserProfile::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& UserProfile::username() const {
  // @@protoc_insertion_point(field_get:commondata.UserProfile.username)
  return _internal_username();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserProfile::set_username(ArgT0&& arg0, ArgT... args) {
 
 username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:commondata.UserProfile.username)
}
inline std::string* UserProfile::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:commondata.UserProfile.username)
  return _s;
}
inline const std::string& UserProfile::_internal_username() const {
  return username_.Get();
}
inline void UserProfile::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UserProfile::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UserProfile::release_username() {
  // @@protoc_insertion_point(field_release:commondata.UserProfile.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UserProfile::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:commondata.UserProfile.username)
}

// .commondata.DisplaySetting disp = 3;
inline bool UserProfile::_internal_has_disp() const {
  return this != internal_default_instance() && disp_ != nullptr;
}
inline bool UserProfile::has_disp() const {
  return _internal_has_disp();
}
inline void UserProfile::clear_disp() {
  if (GetArenaForAllocation() == nullptr && disp_ != nullptr) {
    delete disp_;
  }
  disp_ = nullptr;
}
inline const ::commondata::DisplaySetting& UserProfile::_internal_disp() const {
  const ::commondata::DisplaySetting* p = disp_;
  return p != nullptr ? *p : reinterpret_cast<const ::commondata::DisplaySetting&>(
      ::commondata::_DisplaySetting_default_instance_);
}
inline const ::commondata::DisplaySetting& UserProfile::disp() const {
  // @@protoc_insertion_point(field_get:commondata.UserProfile.disp)
  return _internal_disp();
}
inline void UserProfile::unsafe_arena_set_allocated_disp(
    ::commondata::DisplaySetting* disp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(disp_);
  }
  disp_ = disp;
  if (disp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:commondata.UserProfile.disp)
}
inline ::commondata::DisplaySetting* UserProfile::release_disp() {
  
  ::commondata::DisplaySetting* temp = disp_;
  disp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::commondata::DisplaySetting* UserProfile::unsafe_arena_release_disp() {
  // @@protoc_insertion_point(field_release:commondata.UserProfile.disp)
  
  ::commondata::DisplaySetting* temp = disp_;
  disp_ = nullptr;
  return temp;
}
inline ::commondata::DisplaySetting* UserProfile::_internal_mutable_disp() {
  
  if (disp_ == nullptr) {
    auto* p = CreateMaybeMessage<::commondata::DisplaySetting>(GetArenaForAllocation());
    disp_ = p;
  }
  return disp_;
}
inline ::commondata::DisplaySetting* UserProfile::mutable_disp() {
  ::commondata::DisplaySetting* _msg = _internal_mutable_disp();
  // @@protoc_insertion_point(field_mutable:commondata.UserProfile.disp)
  return _msg;
}
inline void UserProfile::set_allocated_disp(::commondata::DisplaySetting* disp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete disp_;
  }
  if (disp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::commondata::DisplaySetting>::GetOwningArena(disp);
    if (message_arena != submessage_arena) {
      disp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disp, submessage_arena);
    }
    
  } else {
    
  }
  disp_ = disp;
  // @@protoc_insertion_point(field_set_allocated:commondata.UserProfile.disp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace commondata

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_data_2eproto
